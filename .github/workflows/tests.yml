  
name: 'Tests'

on:
  push:

  pull_request:
    types: [opened, synchronize] #labeled, assigned]

jobs:
  build-and-test:
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            python-version: 3.9
            python: xvfb-run python3
            pip_arg: ""
          - os: macos-11
            python-version: 3.9
            python: python3
            pip_arg: ""
          - os: windows-2019
            python-version: 3.9
            python: python
            pip_arg: --user
          - os: ubuntu-22.04
            python-version: 3.11
            python: xvfb-run python3
            pip_arg: ""
    runs-on: ${{ matrix.os }}


    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ${{ matrix.pip_arg }} -e .

      - name: Python unittests
        run: |
          python -m unittest discover -v

      - name: Python plot
        run: |
          # Try to run main plot script
          python plot.py --noshow


      - name: Check if deployment is needed
        if: runner.os == 'Linux'
        id: check_deploy
        env:
            PY_VERSION: ${{matrix.python-version}}
            GH_EVENT  : ${{github.event_name}}
        run: |
          export BRANCH="${GITHUB_REF#refs/heads/}"
          echo "GH_EVENT    :  $GH_EVENT"
          echo "PY_VERSION  :  $PY_VERSION"
          echo "GIT BRANCH  :  $BRANCH"
          export OK=0
          # Only deploy for push events
          if [[ $PY_VERSION == "3.9" ]]; then
            if [[ $GH_EVENT == "push" ]]; then 
              if [[ $BRANCH == "main" ]] ; then 
                export OK=1 ;
              fi
            fi
          fi
          echo "DEPLOY      : $OK"
          if [[ $OK == "1" ]]; then
              echo ">>> Deployment WILL take place"
          else
              echo ">>> Deployment WILL NOT take place"
          fi
          # Save variables as github outputs
          echo "DEPLOY=$OK"  >> $GITHUB_OUTPUT


      - name: Export figure
        if: ${{ (steps.check_deploy.outputs.DEPLOY == '1') && (runner.os == 'Linux') }}
        run: |
          export CURRENT_HASH=`git rev-parse --short HEAD`
          echo "Attempt to export generated figures"
          # Add the figures to the fig repository (only if the figures change)
          # TODO: do that with deploy or artifact insteady
          git fetch --all
          git checkout figs
          cp _figures_tmp/*.png figures/                                      || true
          git config --local user.email "1318316+ebranlard@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add -f figures/*.png                                            || true
          git commit -m "Update of figure after $CURRENT_HASH [skip actions]" || true
          #git push --set-upstream origin figs

      - name: Push changes
        if: ${{ (steps.check_deploy.outputs.DEPLOY == '1') && (runner.os == 'Linux') }}
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: figs
